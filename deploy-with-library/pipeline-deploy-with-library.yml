# Please read the README file before you use this pipeline, this requires create a sectet on kubernetes to connect to the ACR.
# Build and push a docker image to Azure Container Registry, then deploy on a on-prem kubernetes.
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
      - develop
  paths:
    include:
      - 'frontend/**'

resources:
- repo: self

variables:
- group: VariableGroupName

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(containerName)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(containerTag)
- stage: DeployToDev
  displayName: 'Deploy to development'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment:
    displayName: 'Job'
    environment:
      name: $(devEnvironment)
      resourceName: $(devEnvironmentVM)
      resourceType: virtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadSecureFile@1
            name: BackendEnv
            displayName: 'Download env file'
            inputs:
              secureFile: 'BackendEnv'
          - task: Bash@3
            displayName: 'Deploy env file'
            inputs:
              targetType: 'inline'
              script: |
                echo "ENV file"
                cat $(BackendEnv.secureFilePath)
                # Create a Kubernetes secret from the env
                kubectl create secret generic $(containerName)-secret \
                  --from-env-file=$(BackendEnv.secureFilePath) \
                  --namespace=default \
                  --dry-run=client -o yaml | kubectl apply -f -
          - task: Bash@3
            displayName: 'Deploy yaml file'
            inputs:
              targetType: 'inline'
              script: |
                echo "Creating file manifests.yaml"
                # Create deployment YAML that mounts the ConfigMap
                cat > $(Build.ArtifactStagingDirectory)/manifests.yaml << EOF
                # Deployment
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: $(containerName)
                spec:
                  replicas: 4
                  selector:
                    matchLabels:
                      app: $(containerName)
                  template:
                    metadata:
                      labels:
                        app: $(containerName)
                    spec:
                      containers:
                      - name: $(containerName)
                        image: $(containerRegistry)/$(containerName):$(containerTag)
                        imagePullPolicy: IfNotPresent        
                        ports:
                        - containerPort: $(containerPort)
                        envFrom:
                        - secretRef:
                            name: $(containerName)-secret
                      imagePullSecrets:
                      - name: secret-name-of-kubernetes
                ---
                # Service 
                kind: Service
                apiVersion: v1
                metadata:
                  name: $(containerName)-service
                spec:
                  selector:
                    app: $(containerName)
                  ports:
                  - protocol: TCP
                    port: $(servicePort)
                    targetPort: $(containerPort)
                EOF
                cat $(Build.ArtifactStagingDirectory)/manifests.yaml
          - task: Bash@3
            displayName: 'Apply deployment'
            inputs:
              targetType: 'inline'
              script: |
                kubectl apply -f $(Build.ArtifactStagingDirectory)/manifests.yaml
                kubectl get all