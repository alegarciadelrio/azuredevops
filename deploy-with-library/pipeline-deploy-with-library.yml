# Please read the README file before you use this pipeline, this requires create a sectet on kubernetes to connect to the ACR.
# Build and push a docker image to Azure Container Registry, then deploy on a on-prem kubernetes.
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
      - develop
  paths:
    include:
      - 'backend/**'

resources:
- repo: self

variables:
- group: VariableGroupName

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(containerName)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(containerTag)
- stage: DeployToDev
  displayName: 'Deploy to development'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment:
    displayName: 'Job'
    environment: $(devEnvironment)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Deploy namespace file'
            inputs:
              targetType: 'inline'
              script: |
                echo "Creating file namespace.yaml"
                cat > $(Build.ArtifactStagingDirectory)/namespace.yaml << EOF
                apiVersion: v1
                kind: Namespace
                metadata:
                  name: $(namespace)
                EOF
                kubectl apply -f $(Build.ArtifactStagingDirectory)/namespace.yaml
          - task: Docker@2
            displayName: 'Login to ACR'
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              command: 'login'
          - task: Bash@3
            displayName: 'Deploy ACR credential'
            inputs:
              targetType: 'inline'
              script: |
                echo "Deploy ACR credential"
                kubectl create secret docker-registry $(containerRegistry) \
                  --namespace $(namespace) \
                  --from-file=$HOME/.docker/config.json \
                  --dry-run=client -o yaml | kubectl apply -f -
          - task: DownloadSecureFile@1
            name: SecureFileBackendEnv
            displayName: 'Download env file'
            inputs:
              secureFile: 'SecureFileBackendEnv'
          - task: Bash@3
            displayName: 'Deploy backend env file'
            inputs:
              targetType: 'inline'
              script: |
                echo "Deploy backend env file"
                kubectl create secret generic $(containerEnv) \
                  --from-env-file=$(SecureFileBackendEnv.secureFilePath) \
                  --namespace=$(namespace) \
                  --dry-run=client -o yaml | kubectl apply -f -
          - task: Bash@3
            displayName: 'Deploy manifests file'
            inputs:
              targetType: 'inline'
              script: |
                echo "Deploy manifests file"
                cat > $(Build.ArtifactStagingDirectory)/manifests.yaml << EOF
                # Deployment
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: $(containerName)
                  namespace: $(namespace)
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app: $(containerName)
                  template:
                    metadata:
                      labels:
                        app: $(containerName)
                    spec:
                      containers:
                      - name: $(containerName)
                        image: $(containerRegistry)/$(containerName):$(containerTag)
                        imagePullPolicy: IfNotPresent        
                        ports:
                        - containerPort: $(containerPort)
                        envFrom:
                        - secretRef:
                            name: $(containerEnv)
                      imagePullSecrets:
                      - name: $(containerRegistry)
                ---
                # Service 
                kind: Service
                apiVersion: v1
                metadata:
                  name: $(serviceName)
                  namespace: $(namespace)
                  annotations:
                    tailscale.com/expose: "true"
                spec:
                  selector:
                    app: $(containerName)
                  ports:
                  - protocol: TCP
                    port: $(servicePort)
                    targetPort: $(containerPort)
                EOF
                cat $(Build.ArtifactStagingDirectory)/manifests.yaml
                echo "=============================================================================="
                kubectl apply -f $(Build.ArtifactStagingDirectory)/manifests.yaml
                echo "=============================================================================="
                kubectl get all -n $(namespace)