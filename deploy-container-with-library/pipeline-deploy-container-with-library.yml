# Please read the README file before you use this pipeline
# Build and push a docker image to Azure Container Registry, then deploy on a on-prem kubernetes.
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
      - development
  paths:
    include:
      - 'backend/**'

resources:
- repo: self

variables:
- group: VariableGroupName

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(containerName)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(containerTag)
- stage: DeployToDev
  displayName: 'Deploy to development'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment:
    displayName: 'Job'
    environment: $(devEnvironment)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Docker@2
            displayName: 'Login to ACR'
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              command: 'login'
          - task: DownloadSecureFile@1
            name: SecureFileBackendEnv
            displayName: 'Download env file'
            inputs:
              secureFile: 'SecureFileBackendEnv'
          - task: Bash@3
            displayName: 'Deploy the container'
            inputs:
              targetType: 'inline'
              script: |
                # Stop and remove existing container if running
                if [ "$(docker ps -q -f name=$(containerName))" ]; then
                    echo "Stopping existing container..."
                    docker stop $(containerName)
                    docker rm $(containerName)
                fi
                
                # Clean up old images
                echo "Cleaning up old images..."
                docker image prune -f
                
                # Pull latest image
                echo "Pulling latest image..."
                docker pull $(containerRegistry)/$(containerName):$(containerTag)
                
                # Run new container
                echo "Starting new container..."
                docker run -d \
                  --name $(containerName) \
                  --restart always \
                  --network host \
                  --env-file $(SecureFileBackendEnv.secureFilePath) \
                  -p $(servicePort):$(containerPort) \
                  $(containerRegistry)/$(containerName):$(containerTag)
                
                # Verify container is running
                if [ ! "$(docker ps -q -f name=$(containerName))" ]; then
                    echo "Container failed to start"
                    exit 1
                fi
                
                echo "Deployment completed successfully"